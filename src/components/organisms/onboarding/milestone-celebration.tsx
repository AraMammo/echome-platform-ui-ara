"use client";

import React from "react";
import { useRouter } from "next/navigation";
import { X, Check } from "lucide-react";
import Confetti from "react-confetti";
import { Button } from "@/components/atoms/button";

interface MilestoneCelebrationProps {
  milestone: number;
  onClose: () => void;
}

interface MilestoneData {
  emoji: string;
  title: string;
  description: string;
  unlocks: string[];
  nextMilestone: number | null;
  filesUntilNext: number;
  progressToNext: number;
}

function getMilestoneData(milestone: number): MilestoneData {
  const milestones: Record<number, MilestoneData> = {
    10: {
      emoji: "üéØ",
      title: "Getting Warmed Up!",
      description:
        "Echo Me is warming up! Your AI brain is starting to understand your style and voice.",
      unlocks: [
        "Basic content generation",
        "Access to /generate",
        "Simple tone matching",
      ],
      nextMilestone: 25,
      filesUntilNext: 15,
      progressToNext: 40,
    },
    25: {
      emoji: "üî•",
      title: "Finding Your Voice!",
      description:
        "Your voice is starting to show! Echo Me can now capture your unique style and expertise.",
      unlocks: [
        "Advanced tone control",
        "Better audience targeting",
        "Multi-format generation",
        "Preset system access",
      ],
      nextMilestone: 50,
      filesUntilNext: 25,
      progressToNext: 50,
    },
    50: {
      emoji: "üöÄ",
      title: "Sounds Like You!",
      description:
        "This is excellent! Content generated by Echo Me now sounds authentically like you.",
      unlocks: [
        "High-quality content",
        "Advanced formatting options",
        "Style consistency",
        "Full library features",
      ],
      nextMilestone: 100,
      filesUntilNext: 50,
      progressToNext: 50,
    },
    100: {
      emoji: "üèÜ",
      title: "Fully Trained!",
      description:
        "You've done it! Your AI brain is complete. Echo Me can now create content indistinguishable from your own writing.",
      unlocks: [
        "Maximum quality output",
        "Perfect style matching",
        "All features unlocked",
        "Expert-level generation",
      ],
      nextMilestone: null,
      filesUntilNext: 0,
      progressToNext: 100,
    },
  };

  return (
    milestones[milestone] || {
      emoji: "üéØ",
      title: "Milestone Reached!",
      description: "You've hit an important milestone!",
      unlocks: ["New features unlocked"],
      nextMilestone: null,
      filesUntilNext: 0,
      progressToNext: 100,
    }
  );
}

export function MilestoneCelebration({
  milestone,
  onClose,
}: MilestoneCelebrationProps) {
  const milestoneData = getMilestoneData(milestone);
  const router = useRouter();

  return (
    <div
      className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-6"
      onClick={onClose}
      role="dialog"
      aria-modal="true"
      aria-labelledby="milestone-title"
    >
      {/* Confetti effect */}
      <Confetti recycle={false} numberOfPieces={200} gravity={0.3} />

      <div
        className="bg-white rounded-[20px] max-w-lg w-full p-8 relative animate-scale-in"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-[#9b8baf] hover:text-[#1c1c1e] transition-colors p-2 rounded-lg hover:bg-[#f3f1ec] focus:outline-none focus:ring-2 focus:ring-[#3a8e9c] focus:ring-offset-2"
          aria-label="Close celebration"
        >
          <X size={24} />
        </button>

        {/* Milestone icon */}
        <div className="text-center mb-6">
          <div className="text-8xl mb-4 animate-bounce-in" aria-hidden="true">
            {milestoneData.emoji}
          </div>
          <h2
            id="milestone-title"
            className="text-3xl font-medium text-[#1c1c1e] mb-2"
          >
            {milestoneData.title}
          </h2>
          <p className="text-lg text-[#9b8baf]">
            You&apos;ve Uploaded {milestone} Files
          </p>
        </div>

        {/* Achievement description */}
        <div className="mb-6 p-4 bg-[#3a8e9c]/10 rounded-lg">
          <p className="text-[#1c1c1e] text-center">
            {milestoneData.description}
          </p>
        </div>

        {/* What's unlocked */}
        <div className="mb-6">
          <h3 className="font-medium text-[#1c1c1e] mb-3">
            What You&apos;ve Unlocked:
          </h3>
          <div className="space-y-2">
            {milestoneData.unlocks.map((unlock, idx) => (
              <div key={idx} className="flex items-center gap-2">
                <Check size={16} className="text-[#3a8e9c]" />
                <span className="text-sm text-[#1c1c1e]">{unlock}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Next goal */}
        {milestone < 100 && milestoneData.nextMilestone && (
          <div className="mb-6 p-4 border border-[#d5d2cc] rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-[#1c1c1e]">
                Next Goal: {milestoneData.nextMilestone} files
              </span>
              <span className="text-sm text-[#9b8baf]">
                {milestoneData.filesUntilNext} more
              </span>
            </div>
            <div className="h-2 bg-[#d5d2cc] rounded-full overflow-hidden">
              <div
                className="h-full bg-[#3a8e9c] transition-all duration-500"
                style={{ width: `${milestoneData.progressToNext}%` }}
                role="progressbar"
                aria-valuenow={milestoneData.progressToNext}
                aria-valuemin={0}
                aria-valuemax={100}
                aria-label={`Progress to next milestone: ${milestoneData.progressToNext}%`}
              />
            </div>
          </div>
        )}

        {/* CTAs */}
        <div className="flex gap-3">
          <Button
            onClick={() => {
              router.push("/create");
              onClose();
            }}
            className="flex-1 bg-[#3a8e9c] hover:bg-[#2d7a85] text-white"
          >
            {milestone >= 10 ? "Generate Content" : "Try It Out"}
          </Button>
          <Button
            onClick={() => {
              router.push("/knowledge-base");
              onClose();
            }}
            variant="outline"
            className="flex-1 border-[#3a8e9c] text-[#3a8e9c] hover:bg-[#3a8e9c]/10"
          >
            Keep Uploading
          </Button>
        </div>
      </div>
    </div>
  );
}
